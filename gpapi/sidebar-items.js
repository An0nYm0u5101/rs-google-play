initSidebarItems({"enum":[["Endpoint","Play Store API endpoints supported"]],"fn":[["base64_urlsafe","Base64 encode w/ URL safe characters."],["build_login_request",""],["build_openssl_rsa","Gen up an `openssl::rsa::Rsa` from a `PubKey`."],["bulk_details","Play Store bulk package detail request."],["details","Play Store package detail request (provides more detail than bulk requests)."],["encrypt_login","Handles encrypting your login/password using Google's public key Produces something of the format: |00|4 bytes of sha1(publicKey)|rsaEncrypt(publicKeyPem, \"login\\x00password\")|"],["execute_request","Lower level Play Store request, used by APIs but exposed for specialized requests. Returns a `ResponseWrapper` which depending on the request populates different fields/values."],["login","Handles logging into Google Play Store, retrieving a set of tokens from the server that can be used for future requests. The `android_id` is obtained by retrieving your GSF id. You can also get your GSF ID  using this following device id app Note that you don't want the Android ID here, but the GSF id. We call it the `android_id` internally for legacy reasons."],["parse_form_reply",""]],"mod":[["consts",""],["protos",""]],"struct":[["BuildConfiguration",""],["Easy","Raw bindings to a libcurl \"easy session\"."],["Gpapi",""],["List","A linked list of a strings"],["LoginRequest",""],["PubKey",""]],"trait":[["Message","Trait implemented for all generated structs for protobuf messages. Also, generated messages implement `Clone + Default + PartialEq`"],["QueryParams","A trait that provides a convenience method for using URL-encoded query paramaters in a URL with `curl::Easy`"]]});